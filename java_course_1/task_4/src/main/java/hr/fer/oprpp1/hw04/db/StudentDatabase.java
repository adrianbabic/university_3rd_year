package hr.fer.oprpp1.hw04.db;

import java.util.*;

/**	Class used for checking if the format of given database is correct.
 * 	Class is also used for accessing data in O(1) complexity.
 *  
 * 	@author adrian
 */
public class StudentDatabase {
	/** List containing objects of type String representing lines in the text file. **/
	private List<String> entry;
	/** List containing objects of type StudentRecord generated by this class. **/
	private List<StudentRecord> internalList;
	/** Map for storing student's jmbag under index for quick retrieval. **/
	private Map<String, Integer> jmbagAndIndex; 
	/** Integer for numering the student's jmbag in map. **/
	private int currentIndex;
	
	/** Default constructor which initializes List<StudentRecord> and Map<String, Integer>.
	 * 	Also stores reference to List<String> containing lines from the text file.	
	 * 	Generates an instance of StudentRecord for each line of the text file.
	 *
	 */
	public StudentDatabase(List<String> entry) {
		this.entry = entry;
		this.internalList = new ArrayList<StudentRecord>();
		this.jmbagAndIndex = new HashMap<>();
		this.currentIndex = 0;
		generate();
	}
	
	/** Method is returning an object of type StudentRecord for the given
	 * 	jmbag in o(1) complexity.
	 * 
	 * 	@param object of type String representing jmbag value
	 * 	@return object of type StudentRecord if the given jmbag exists in the database
	 * 	@return null if the given jmbag does not exist in the database
	 */
	public StudentRecord forJMBAG(String jmbag) {
		Integer index = jmbagAndIndex.get(jmbag);
		return index == null ? null : internalList.get(index);
	}
	
	/** Method is going through all the StudentRecord objects in the database and 
	 * 	filters them by the given implementation of IFilter interface.
	 * 
	 * 	@param object which implements IFilter interface
	 * 	@return reference to filtered List<StudentRecord> 
	 */
	public List<StudentRecord> filter(IFilter filter){
		List<StudentRecord> tmp = new ArrayList<>();
		for(StudentRecord one: internalList) {
			if(filter.accepts(one))
				tmp.add(one);
		}
		return tmp;
	}
	
	/** Private method used for helping generating the database. Creates a new object of type 
	 * 	StudentRecord for line of the text file. Stores the objects in a list and creates an index
	 * 	for fast retrieval.
	 * 	Only accepts grades between 1 and 5. Duplicate jmbag values are not allowed.
	 * 
	 * 	@throws IllegalArgumentException if grade is not between 1 and 5
	 * 	@throws IllegalArgumentException if duplicate jmbags are present 
	 */
	private void generate(){
		String[] rowElements;
		Integer grade; 
		for(String oneRow: entry) {
			rowElements = oneRow.trim().split("\t");
			grade = Integer.valueOf(rowElements[3]);
			if(grade < 1 || grade > 5) throw new IllegalArgumentException("Final grade must be between 1 and 5.");
			if(jmbagAndIndex.containsKey(rowElements[0])) throw new IllegalArgumentException("Duplicate jmbags are not allowed!");
			jmbagAndIndex.put(rowElements[0], currentIndex++);
			internalList.add(new StudentRecord(rowElements[0], rowElements[1], rowElements[2], grade));
		}
	}

}
